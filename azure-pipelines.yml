# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true

name: $(Build.SourceVersion)
jobs:
- job: Linux
  timeoutInMinutes: 0
  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    ESY__CACHE_INSTALL_PATH: /home/vsts/.esy/3_____________________________________________________________________/i/
    ESY__CACHE_SOURCE_TARBALL_PATH: /home/vsts/.esy/source/i
    STAGING_DIRECTORY: /home/vsts/STAGING
    STAGING_DIRECTORY_UNIX: /home/vsts/STAGING

  steps:
  # - template: .ci/restore-build-cache.yml
  # - template: .ci/esy-build-steps.yml
  - script: .ci/create-static-binary.sh
  - script: chmod +x rLog
  # - template: .ci/publish-build-cache.yml
  - task: PublishBuildArtifacts@1
    displayName: 'Save artifact'
    inputs:
        PathtoPublish: rLog
        ArtifactName: rLog-linux

- job: MacOS
  timeoutInMinutes: 0
  pool:
    vmImage: 'macOS 10.13'

  variables:
    ESY__CACHE_INSTALL_PATH: /Users/vsts/.esy/3____________________________________________________________________/i/
    ESY__CACHE_SOURCE_TARBALL_PATH: /Users/vsts/.esy/source/i
    STAGING_DIRECTORY: /Users/vsts/STAGING
    STAGING_DIRECTORY_UNIX: /Users/vsts/STAGING

  steps:
  - template: .ci/restore-build-cache.yml
  - template: .ci/esy-build-steps.yml
  - script: cp _build/default/executable/RLog.exe _build/rLog
  - script: strip _build/rLog
  - script: chmod +x _build/rLog
  - template: .ci/publish-build-cache.yml
  - task: PublishBuildArtifacts@1
    displayName: 'Save artifact'
    inputs:
        PathtoPublish: '_build/rLog'
        ArtifactName: rLog-macos